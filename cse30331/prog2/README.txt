					Iheanyi Ekechukwu Programming Assignment 2 Implementation


For programming assignment 2, our task was to implement a priority queue (heap) using the pqueue.cxx file. The most difficult implementation of the queue had to be the insert() method and the pop_front() method. Both of these required reheapification, with insert requiring a reheapification upward and pop_front requiring a reheapification downward. When reheaping upwards, you look to see if the node's parent is less than the node itself and then you switch them until the designated node reaches a point in the tree where it's parent is greater than it is. This ensures that the tree is correctly implemented. With reheapification downwards, it is the same logic, only you are checking to see if the child nodes are greater than the node itself and keep on moving downwards until you get a child node that is less than the node itself. Implementing the front and front priority were relatively simple, each of them builds off of one another. Both merely involve looping through the entire queue to find the highest priority and returning the location/priority value. Since the heap is implemented using a vector, we are able to use STL functions to check values such as size() and empty() in one line of code and return said value. Using formulas for determining left child and right child locations, 2*i + 1 & 2*i + 2 respectively, we can find the index of the left child nodes and right child nodes. Same goes for parent nodes as well, with their index being found at (i-1)/2. Swapping with the parent is somewhat easy, just make sure to designate temporary entries to store all the necessary information for hte parent node and child node and then reassign values accordingly. Lastly, to determine the big child elements, you have to see if there is a right child node and if not, you can just merely return the left. If there is though, you can determine which one of the two is larger between the left and the right and then return that value accordingly. 